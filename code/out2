CC = clang
SRC_DIR = ./src
SRCS =	$(SRC_DIR)/parseo.c\
		$(SRC_DIR)/aux.c\
		$(SRC_DIR)/delete_quotes.c\
		$(SRC_DIR)/expand_quotes.c\
		$(SRC_DIR)/token_list_func.c\
		$(SRC_DIR)/tokenize_functions.c\
		$(SRC_DIR)/tokenize_aux.c\
		$(SRC_DIR)/tokenize.c\
		$(SRC_DIR)/command_lst.c\
		$(SRC_DIR)/command_lst2.c\
		$(SRC_DIR)/search_path.c\
		$(SRC_DIR)/execute.c\
		$(SRC_DIR)/ex_single_cmd.c\
		$(SRC_DIR)/exec_pipeline.c\
		$(SRC_DIR)/command_types.c\
		$(SRC_DIR)/built-ins.c\
		$(SRC_DIR)/jk_builtin_env.c\
		$(SRC_DIR)/jk_builtin_exit.c\
		$(SRC_DIR)/jk_env_copy.c\
		$(SRC_DIR)/here_doc.c\
		$(SRC_DIR)/get_prompt.c\
#		$(SRC_DIR)/ft_utils.c\
OBJS = $(SRCS:$(SRC_DIR)/%.c=$(OBJ_DIR)/%.o)
#BONUS_DIR = ./src
#BONUS_SRCS = $(BONUS_DIR)/bonus/pipex_bonus.c\
			$(BONUS_DIR)/ft_execute.c\
			$(BONUS_DIR)/ft_process.c\
			$(BONUS_DIR)/ft_utils.c\
#BONUS_OBJS = $(BONUS_SRCS:$(BONUS_DIR)/%.c=$(OBJ_DIR_BONUS)/%.o)
#	@printf "$(GREEN)[Success] $(BONUS_NAME) created successfully!\n$(RESET)"
	@printf "$(GREEN)[Success] $(NAME) created successfully!\n$(RESET)"
$(OBJ_DIR)/%.o: $(SRC_DIR)/%.c | $(OBJ_DIR)
	@$(CC) $(CFLAGS) $(INCLUDES) -c $< -o $@
#$(OBJ_DIR_BONUS)/%.o: $(BONUS_DIR)/%.c | $(OBJ_DIR_BONUS)
#	@$(CC) $(CFLAGS) $(INCLUDES) -c $< -o $@
	@printf "$(CYAN)[Directory] Creating object directory $(OBJ_DIR)...\n$(RESET)"
#	@printf "$(CYAN)[Directory] Creating bonus object directory $(OBJ_DIR_BONUS)...\n$(RESET)"
	@$(MAKE) -C $(LIBFT_DIR) clean
	@printf "$(GREEN)[Libft Ready] Libft compiled successfully!\n$(RESET)"
clean:
	@printf "$(RED)[Cleaning] Removing object files...\n$(RESET)"
	@printf "$(GREEN)[Cleaned] Object files removed successfully!\n$(RESET)"
fclean: clean
	@$(MAKE) -C $(LIBFT_DIR) fclean
	@printf "$(GREEN)[Cleaned] All binaries and libraries removed successfully!\n$(RESET)"
re: fclean all
.PHONY: all clean fclean re bonus
